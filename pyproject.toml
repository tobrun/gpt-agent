[build-system]
requires = ["setuptools>=64", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "gpt-oss-agent"
version = "0.2.0"
description = "AI Agent for GPT-OSS models via vLLM"
readme = "README.md"
requires-python = ">=3.8"
license = {text = "MIT"}
authors = [
    {name = "GPT-OSS Agent Contributors"}
]
keywords = ["ai", "agent", "gpt", "vllm", "openai"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
dependencies = [
    "openai-agents",
    "openai>=1.0.0", 
    "python-dotenv",
    "httpx",
    "rich",
    "requests",
    "pydantic>=2.0",
    "pydantic-settings",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0",
    "pytest-asyncio",
    "pytest-cov",
    "black",
    "ruff",
    "mypy",
    "pre-commit",
    "types-requests",
]

[project.scripts]
gpt-oss-agent = "gpt_oss_agent.cli.app:main"

[project.urls]
Homepage = "https://github.com/yourusername/gpt-oss-agent"
Repository = "https://github.com/yourusername/gpt-oss-agent"
Issues = "https://github.com/yourusername/gpt-oss-agent/issues"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-dir]
"" = "src"

# Black code formatter
[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

# Ruff linter and formatter
[tool.ruff]
target-version = "py38"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "N",  # pep8-naming
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "RUF", # ruff-specific rules
]
ignore = [
    "B008",  # do not perform function calls in argument defaults
    "RUF012", # mutable class attributes should be annotated with `typing.ClassVar`
]

[tool.ruff.per-file-ignores]
"tests/**/*.py" = ["E501"]  # allow long lines in tests

# MyPy type checker
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
check_untyped_defs = true
disallow_any_generics = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
no_implicit_optional = true

[[tool.mypy.overrides]]
module = [
    "agents.*",
    "rich.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = [
    "tests",
]
python_files = [
    "test_*.py",
    "*_test.py",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
branch = true

[tool.coverage.report]
show_missing = true
fail_under = 80